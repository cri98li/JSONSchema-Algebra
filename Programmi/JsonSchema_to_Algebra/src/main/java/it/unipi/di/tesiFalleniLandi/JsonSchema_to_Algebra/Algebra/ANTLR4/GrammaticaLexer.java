// Generated from Grammatica.g4 by ANTLR 4.8
package it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.Algebra.ANTLR4;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class GrammaticaLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.8", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, NULL=43, TYPE=44, INT=45, DOUBLE=46, 
		WS=47, STRING=48, BOOLEAN=49;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
			"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
			"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
			"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
			"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
			"T__41", "NULL", "TYPE", "INT", "DOUBLE", "WS", "STRING", "BOOLEAN", 
			"ESC", "UNICODE", "HEX", "SAFECODEPOINT"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'{'", "','", "'}'", "'type'", "'('", "')'", "'bet'", "'xbet'", 
			"'length'", "'betItems'", "'pro'", "'mof'", "'notMof'", "'not'", "'allOf'", 
			"'['", "']'", "'oneOf'", "'anyOf'", "'req'", "'enum['", "'ifThenElse'", 
			"';'", "'ifThen'", "'uniqueItems'", "'repeatedItems'", "'pattern'", "'notPattern'", 
			"'items'", "'contains'", "'props'", "':'", "'const'", "'def'", "'='", 
			"'rootdef'", "'ref'", "'names'", "'exNames'", "'annotations'", "'pattReq'", 
			"'addPattReq'", "'null'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, "NULL", "TYPE", "INT", "DOUBLE", 
			"WS", "STRING", "BOOLEAN"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public GrammaticaLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Grammatica.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\63\u01ce\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
		"\t\64\4\65\t\65\4\66\t\66\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5\3\5"+
		"\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3"+
		"\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3"+
		"\f\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3"+
		"\17\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3"+
		"\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\26\3"+
		"\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3"+
		"\27\3\27\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3"+
		"\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3"+
		"\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3"+
		"\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3"+
		"\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3"+
		"\37\3 \3 \3 \3 \3 \3 \3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3$\3$"+
		"\3%\3%\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3("+
		"\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*"+
		"\3*\3*\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3,\3,\3,\3,\3,\3-\3-\3-\3-\3-"+
		"\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-"+
		"\5-\u0187\n-\3.\5.\u018a\n.\3.\6.\u018d\n.\r.\16.\u018e\3/\5/\u0192\n"+
		"/\3/\6/\u0195\n/\r/\16/\u0196\3/\3/\6/\u019b\n/\r/\16/\u019c\3\60\6\60"+
		"\u01a0\n\60\r\60\16\60\u01a1\3\60\3\60\3\61\3\61\7\61\u01a8\n\61\f\61"+
		"\16\61\u01ab\13\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3"+
		"\62\5\62\u01b8\n\62\3\63\3\63\3\63\5\63\u01bd\n\63\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u01c9\n\64\3\65\3\65\3\66\3\66\3\u01a9"+
		"\2\67\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35"+
		"\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36"+
		";\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\2g\2i\2k\2\3\2"+
		"\b\3\2\62;\4\2\62;GG\5\2\13\f\17\17\"\"\n\2$$\61\61^^ddhhppttvv\5\2\62"+
		";CHch\5\2\2!$$^^\2\u01d9\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2"+
		"\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25"+
		"\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2"+
		"\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2"+
		"\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3"+
		"\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2"+
		"\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2"+
		"Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3"+
		"\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\3m\3\2\2\2\5o\3\2\2\2\7q\3\2\2"+
		"\2\ts\3\2\2\2\13x\3\2\2\2\rz\3\2\2\2\17|\3\2\2\2\21\u0080\3\2\2\2\23\u0085"+
		"\3\2\2\2\25\u008c\3\2\2\2\27\u0095\3\2\2\2\31\u0099\3\2\2\2\33\u009d\3"+
		"\2\2\2\35\u00a4\3\2\2\2\37\u00a8\3\2\2\2!\u00ae\3\2\2\2#\u00b0\3\2\2\2"+
		"%\u00b2\3\2\2\2\'\u00b8\3\2\2\2)\u00be\3\2\2\2+\u00c2\3\2\2\2-\u00c8\3"+
		"\2\2\2/\u00d3\3\2\2\2\61\u00d5\3\2\2\2\63\u00dc\3\2\2\2\65\u00e8\3\2\2"+
		"\2\67\u00f6\3\2\2\29\u00fe\3\2\2\2;\u0109\3\2\2\2=\u010f\3\2\2\2?\u0118"+
		"\3\2\2\2A\u011e\3\2\2\2C\u0120\3\2\2\2E\u0126\3\2\2\2G\u012a\3\2\2\2I"+
		"\u012c\3\2\2\2K\u0134\3\2\2\2M\u0138\3\2\2\2O\u013e\3\2\2\2Q\u0146\3\2"+
		"\2\2S\u0152\3\2\2\2U\u015a\3\2\2\2W\u0165\3\2\2\2Y\u0186\3\2\2\2[\u0189"+
		"\3\2\2\2]\u0191\3\2\2\2_\u019f\3\2\2\2a\u01a5\3\2\2\2c\u01b7\3\2\2\2e"+
		"\u01b9\3\2\2\2g\u01c8\3\2\2\2i\u01ca\3\2\2\2k\u01cc\3\2\2\2mn\7}\2\2n"+
		"\4\3\2\2\2op\7.\2\2p\6\3\2\2\2qr\7\177\2\2r\b\3\2\2\2st\7v\2\2tu\7{\2"+
		"\2uv\7r\2\2vw\7g\2\2w\n\3\2\2\2xy\7*\2\2y\f\3\2\2\2z{\7+\2\2{\16\3\2\2"+
		"\2|}\7d\2\2}~\7g\2\2~\177\7v\2\2\177\20\3\2\2\2\u0080\u0081\7z\2\2\u0081"+
		"\u0082\7d\2\2\u0082\u0083\7g\2\2\u0083\u0084\7v\2\2\u0084\22\3\2\2\2\u0085"+
		"\u0086\7n\2\2\u0086\u0087\7g\2\2\u0087\u0088\7p\2\2\u0088\u0089\7i\2\2"+
		"\u0089\u008a\7v\2\2\u008a\u008b\7j\2\2\u008b\24\3\2\2\2\u008c\u008d\7"+
		"d\2\2\u008d\u008e\7g\2\2\u008e\u008f\7v\2\2\u008f\u0090\7K\2\2\u0090\u0091"+
		"\7v\2\2\u0091\u0092\7g\2\2\u0092\u0093\7o\2\2\u0093\u0094\7u\2\2\u0094"+
		"\26\3\2\2\2\u0095\u0096\7r\2\2\u0096\u0097\7t\2\2\u0097\u0098\7q\2\2\u0098"+
		"\30\3\2\2\2\u0099\u009a\7o\2\2\u009a\u009b\7q\2\2\u009b\u009c\7h\2\2\u009c"+
		"\32\3\2\2\2\u009d\u009e\7p\2\2\u009e\u009f\7q\2\2\u009f\u00a0\7v\2\2\u00a0"+
		"\u00a1\7O\2\2\u00a1\u00a2\7q\2\2\u00a2\u00a3\7h\2\2\u00a3\34\3\2\2\2\u00a4"+
		"\u00a5\7p\2\2\u00a5\u00a6\7q\2\2\u00a6\u00a7\7v\2\2\u00a7\36\3\2\2\2\u00a8"+
		"\u00a9\7c\2\2\u00a9\u00aa\7n\2\2\u00aa\u00ab\7n\2\2\u00ab\u00ac\7Q\2\2"+
		"\u00ac\u00ad\7h\2\2\u00ad \3\2\2\2\u00ae\u00af\7]\2\2\u00af\"\3\2\2\2"+
		"\u00b0\u00b1\7_\2\2\u00b1$\3\2\2\2\u00b2\u00b3\7q\2\2\u00b3\u00b4\7p\2"+
		"\2\u00b4\u00b5\7g\2\2\u00b5\u00b6\7Q\2\2\u00b6\u00b7\7h\2\2\u00b7&\3\2"+
		"\2\2\u00b8\u00b9\7c\2\2\u00b9\u00ba\7p\2\2\u00ba\u00bb\7{\2\2\u00bb\u00bc"+
		"\7Q\2\2\u00bc\u00bd\7h\2\2\u00bd(\3\2\2\2\u00be\u00bf\7t\2\2\u00bf\u00c0"+
		"\7g\2\2\u00c0\u00c1\7s\2\2\u00c1*\3\2\2\2\u00c2\u00c3\7g\2\2\u00c3\u00c4"+
		"\7p\2\2\u00c4\u00c5\7w\2\2\u00c5\u00c6\7o\2\2\u00c6\u00c7\7]\2\2\u00c7"+
		",\3\2\2\2\u00c8\u00c9\7k\2\2\u00c9\u00ca\7h\2\2\u00ca\u00cb\7V\2\2\u00cb"+
		"\u00cc\7j\2\2\u00cc\u00cd\7g\2\2\u00cd\u00ce\7p\2\2\u00ce\u00cf\7G\2\2"+
		"\u00cf\u00d0\7n\2\2\u00d0\u00d1\7u\2\2\u00d1\u00d2\7g\2\2\u00d2.\3\2\2"+
		"\2\u00d3\u00d4\7=\2\2\u00d4\60\3\2\2\2\u00d5\u00d6\7k\2\2\u00d6\u00d7"+
		"\7h\2\2\u00d7\u00d8\7V\2\2\u00d8\u00d9\7j\2\2\u00d9\u00da\7g\2\2\u00da"+
		"\u00db\7p\2\2\u00db\62\3\2\2\2\u00dc\u00dd\7w\2\2\u00dd\u00de\7p\2\2\u00de"+
		"\u00df\7k\2\2\u00df\u00e0\7s\2\2\u00e0\u00e1\7w\2\2\u00e1\u00e2\7g\2\2"+
		"\u00e2\u00e3\7K\2\2\u00e3\u00e4\7v\2\2\u00e4\u00e5\7g\2\2\u00e5\u00e6"+
		"\7o\2\2\u00e6\u00e7\7u\2\2\u00e7\64\3\2\2\2\u00e8\u00e9\7t\2\2\u00e9\u00ea"+
		"\7g\2\2\u00ea\u00eb\7r\2\2\u00eb\u00ec\7g\2\2\u00ec\u00ed\7c\2\2\u00ed"+
		"\u00ee\7v\2\2\u00ee\u00ef\7g\2\2\u00ef\u00f0\7f\2\2\u00f0\u00f1\7K\2\2"+
		"\u00f1\u00f2\7v\2\2\u00f2\u00f3\7g\2\2\u00f3\u00f4\7o\2\2\u00f4\u00f5"+
		"\7u\2\2\u00f5\66\3\2\2\2\u00f6\u00f7\7r\2\2\u00f7\u00f8\7c\2\2\u00f8\u00f9"+
		"\7v\2\2\u00f9\u00fa\7v\2\2\u00fa\u00fb\7g\2\2\u00fb\u00fc\7t\2\2\u00fc"+
		"\u00fd\7p\2\2\u00fd8\3\2\2\2\u00fe\u00ff\7p\2\2\u00ff\u0100\7q\2\2\u0100"+
		"\u0101\7v\2\2\u0101\u0102\7R\2\2\u0102\u0103\7c\2\2\u0103\u0104\7v\2\2"+
		"\u0104\u0105\7v\2\2\u0105\u0106\7g\2\2\u0106\u0107\7t\2\2\u0107\u0108"+
		"\7p\2\2\u0108:\3\2\2\2\u0109\u010a\7k\2\2\u010a\u010b\7v\2\2\u010b\u010c"+
		"\7g\2\2\u010c\u010d\7o\2\2\u010d\u010e\7u\2\2\u010e<\3\2\2\2\u010f\u0110"+
		"\7e\2\2\u0110\u0111\7q\2\2\u0111\u0112\7p\2\2\u0112\u0113\7v\2\2\u0113"+
		"\u0114\7c\2\2\u0114\u0115\7k\2\2\u0115\u0116\7p\2\2\u0116\u0117\7u\2\2"+
		"\u0117>\3\2\2\2\u0118\u0119\7r\2\2\u0119\u011a\7t\2\2\u011a\u011b\7q\2"+
		"\2\u011b\u011c\7r\2\2\u011c\u011d\7u\2\2\u011d@\3\2\2\2\u011e\u011f\7"+
		"<\2\2\u011fB\3\2\2\2\u0120\u0121\7e\2\2\u0121\u0122\7q\2\2\u0122\u0123"+
		"\7p\2\2\u0123\u0124\7u\2\2\u0124\u0125\7v\2\2\u0125D\3\2\2\2\u0126\u0127"+
		"\7f\2\2\u0127\u0128\7g\2\2\u0128\u0129\7h\2\2\u0129F\3\2\2\2\u012a\u012b"+
		"\7?\2\2\u012bH\3\2\2\2\u012c\u012d\7t\2\2\u012d\u012e\7q\2\2\u012e\u012f"+
		"\7q\2\2\u012f\u0130\7v\2\2\u0130\u0131\7f\2\2\u0131\u0132\7g\2\2\u0132"+
		"\u0133\7h\2\2\u0133J\3\2\2\2\u0134\u0135\7t\2\2\u0135\u0136\7g\2\2\u0136"+
		"\u0137\7h\2\2\u0137L\3\2\2\2\u0138\u0139\7p\2\2\u0139\u013a\7c\2\2\u013a"+
		"\u013b\7o\2\2\u013b\u013c\7g\2\2\u013c\u013d\7u\2\2\u013dN\3\2\2\2\u013e"+
		"\u013f\7g\2\2\u013f\u0140\7z\2\2\u0140\u0141\7P\2\2\u0141\u0142\7c\2\2"+
		"\u0142\u0143\7o\2\2\u0143\u0144\7g\2\2\u0144\u0145\7u\2\2\u0145P\3\2\2"+
		"\2\u0146\u0147\7c\2\2\u0147\u0148\7p\2\2\u0148\u0149\7p\2\2\u0149\u014a"+
		"\7q\2\2\u014a\u014b\7v\2\2\u014b\u014c\7c\2\2\u014c\u014d\7v\2\2\u014d"+
		"\u014e\7k\2\2\u014e\u014f\7q\2\2\u014f\u0150\7p\2\2\u0150\u0151\7u\2\2"+
		"\u0151R\3\2\2\2\u0152\u0153\7r\2\2\u0153\u0154\7c\2\2\u0154\u0155\7v\2"+
		"\2\u0155\u0156\7v\2\2\u0156\u0157\7T\2\2\u0157\u0158\7g\2\2\u0158\u0159"+
		"\7s\2\2\u0159T\3\2\2\2\u015a\u015b\7c\2\2\u015b\u015c\7f\2\2\u015c\u015d"+
		"\7f\2\2\u015d\u015e\7R\2\2\u015e\u015f\7c\2\2\u015f\u0160\7v\2\2\u0160"+
		"\u0161\7v\2\2\u0161\u0162\7T\2\2\u0162\u0163\7g\2\2\u0163\u0164\7s\2\2"+
		"\u0164V\3\2\2\2\u0165\u0166\7p\2\2\u0166\u0167\7w\2\2\u0167\u0168\7n\2"+
		"\2\u0168\u0169\7n\2\2\u0169X\3\2\2\2\u016a\u016b\7q\2\2\u016b\u016c\7"+
		"d\2\2\u016c\u0187\7l\2\2\u016d\u016e\7u\2\2\u016e\u016f\7v\2\2\u016f\u0187"+
		"\7t\2\2\u0170\u0171\7p\2\2\u0171\u0172\7w\2\2\u0172\u0187\7o\2\2\u0173"+
		"\u0174\7k\2\2\u0174\u0175\7p\2\2\u0175\u0187\7v\2\2\u0176\u0177\7c\2\2"+
		"\u0177\u0178\7t\2\2\u0178\u0187\7t\2\2\u0179\u017a\7d\2\2\u017a\u017b"+
		"\7q\2\2\u017b\u017c\7q\2\2\u017c\u0187\7n\2\2\u017d\u017e\7p\2\2\u017e"+
		"\u017f\7w\2\2\u017f\u0180\7o\2\2\u0180\u0181\7P\2\2\u0181\u0182\7q\2\2"+
		"\u0182\u0183\7v\2\2\u0183\u0184\7K\2\2\u0184\u0185\7p\2\2\u0185\u0187"+
		"\7v\2\2\u0186\u016a\3\2\2\2\u0186\u016d\3\2\2\2\u0186\u0170\3\2\2\2\u0186"+
		"\u0173\3\2\2\2\u0186\u0176\3\2\2\2\u0186\u0179\3\2\2\2\u0186\u017d\3\2"+
		"\2\2\u0187Z\3\2\2\2\u0188\u018a\7/\2\2\u0189\u0188\3\2\2\2\u0189\u018a"+
		"\3\2\2\2\u018a\u018c\3\2\2\2\u018b\u018d\t\2\2\2\u018c\u018b\3\2\2\2\u018d"+
		"\u018e\3\2\2\2\u018e\u018c\3\2\2\2\u018e\u018f\3\2\2\2\u018f\\\3\2\2\2"+
		"\u0190\u0192\7/\2\2\u0191\u0190\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0194"+
		"\3\2\2\2\u0193\u0195\t\2\2\2\u0194\u0193\3\2\2\2\u0195\u0196\3\2\2\2\u0196"+
		"\u0194\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0198\3\2\2\2\u0198\u019a\7\60"+
		"\2\2\u0199\u019b\t\3\2\2\u019a\u0199\3\2\2\2\u019b\u019c\3\2\2\2\u019c"+
		"\u019a\3\2\2\2\u019c\u019d\3\2\2\2\u019d^\3\2\2\2\u019e\u01a0\t\4\2\2"+
		"\u019f\u019e\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u019f\3\2\2\2\u01a1\u01a2"+
		"\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a4\b\60\2\2\u01a4`\3\2\2\2\u01a5"+
		"\u01a9\7$\2\2\u01a6\u01a8\13\2\2\2\u01a7\u01a6\3\2\2\2\u01a8\u01ab\3\2"+
		"\2\2\u01a9\u01aa\3\2\2\2\u01a9\u01a7\3\2\2\2\u01aa\u01ac\3\2\2\2\u01ab"+
		"\u01a9\3\2\2\2\u01ac\u01ad\7$\2\2\u01adb\3\2\2\2\u01ae\u01af\7v\2\2\u01af"+
		"\u01b0\7t\2\2\u01b0\u01b1\7w\2\2\u01b1\u01b8\7g\2\2\u01b2\u01b3\7h\2\2"+
		"\u01b3\u01b4\7c\2\2\u01b4\u01b5\7n\2\2\u01b5\u01b6\7u\2\2\u01b6\u01b8"+
		"\7g\2\2\u01b7\u01ae\3\2\2\2\u01b7\u01b2\3\2\2\2\u01b8d\3\2\2\2\u01b9\u01bc"+
		"\7^\2\2\u01ba\u01bd\t\5\2\2\u01bb\u01bd\5g\64\2\u01bc\u01ba\3\2\2\2\u01bc"+
		"\u01bb\3\2\2\2\u01bdf\3\2\2\2\u01be\u01bf\7w\2\2\u01bf\u01c0\5i\65\2\u01c0"+
		"\u01c1\5i\65\2\u01c1\u01c2\5i\65\2\u01c2\u01c3\5i\65\2\u01c3\u01c9\3\2"+
		"\2\2\u01c4\u01c5\7z\2\2\u01c5\u01c6\5i\65\2\u01c6\u01c7\5i\65\2\u01c7"+
		"\u01c9\3\2\2\2\u01c8\u01be\3\2\2\2\u01c8\u01c4\3\2\2\2\u01c9h\3\2\2\2"+
		"\u01ca\u01cb\t\6\2\2\u01cbj\3\2\2\2\u01cc\u01cd\n\7\2\2\u01cdl\3\2\2\2"+
		"\16\2\u0186\u0189\u018e\u0191\u0196\u019c\u01a1\u01a9\u01b7\u01bc\u01c8"+
		"\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}