[TRACE] 2020-08-25 17:22:33.707 [main-1] Utils_FullAlgebra - Parsing file test.algebra
[TRACE] 2020-08-25 17:22:33.790 [main-1] ComplexPattern - Creating a ComplexPattern from RegExp: "aa"
[TRACE] 2020-08-25 17:22:33.790 [main-1] Pattern_Assertion - Created a new Pattern_Assertion: Pattern_Assertion ["aa"]
[TRACE] 2020-08-25 17:22:33.791 [main-1] Defs_Assertion - Creating an empty Defs_Assertion
[TRACE] 2020-08-25 17:22:33.791 [main-1] Defs_Assertion - Setting root={} as rootdef
[TRACE] 2020-08-25 17:22:33.800 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[TRACE] 2020-08-25 17:22:33.800 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[TRACE] 2020-08-25 17:22:33.800 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_false'}
[TRACE] 2020-08-25 17:22:33.800 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[DEBUG] 2020-08-25 17:22:33.801 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=false}
[TRACE] 2020-08-25 17:22:33.801 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_true'}
[TRACE] 2020-08-25 17:22:33.801 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[DEBUG] 2020-08-25 17:22:33.801 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.801 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_false'}
[TRACE] 2020-08-25 17:22:33.801 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[TRACE] 2020-08-25 17:22:33.801 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_true'}
[TRACE] 2020-08-25 17:22:33.801 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[TRACE] 2020-08-25 17:22:33.802 [main-1] WitnessEnv - Creating an empty WitnessEnv
[TRACE] 2020-08-25 17:22:33.802 [main-1] WitnessVar - Created a new WitnessVar with name=(root=resolveName(root))
[TRACE] 2020-08-25 17:22:33.803 [main-1] WitnessPattern - Created a new WitnessPattern WitnessPattern{pattern="aa"}
[TRACE] 2020-08-25 17:22:33.803 [main-1] WitnessEnv - Adding to env <WitnessVar{name='root'}, WitnessPattern{pattern="aa"}>
[TRACE] 2020-08-25 17:22:33.804 [main-1] WitnessVar - Created a new WitnessVar with name=(not_root=resolveName(not_root))
[DEBUG] 2020-08-25 17:22:33.808 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.809 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[TRACE] 2020-08-25 17:22:33.809 [main-1] WitnessType - Created a new WitnessType: 
[TRACE] 2020-08-25 17:22:33.811 [main-1] ComplexPattern - Complement "aa" = pNot("aa")
[TRACE] 2020-08-25 17:22:33.811 [main-1] WitnessPattern - Created a new WitnessPattern WitnessPattern{pattern=pNot("aa")}
[TRACE] 2020-08-25 17:22:33.811 [main-1] WitnessEnv - Building obdd
[TRACE] 2020-08-25 17:22:33.813 [main-1] WitnessEnv - Building obdd
[TRACE] 2020-08-25 17:22:33.813 [main-1] Defs_Assertion - Creating an empty Defs_Assertion
[TRACE] 2020-08-25 17:22:33.813 [main-1] Pattern_Assertion - Created a new Pattern_Assertion: Pattern_Assertion ["aa"]
[TRACE] 2020-08-25 17:22:33.813 [main-1] Defs_Assertion - Setting root={} as rootdef
[TRACE] 2020-08-25 17:22:33.813 [main-1] Boolean_Assertion - Creating a Boolean_Assertion with value true
[TRACE] 2020-08-25 17:22:33.814 [main-1] AllOf_Assertion - Creating an empty AllOf_Assertion
[TRACE] 2020-08-25 17:22:33.815 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.816 [main-1] Type_Assertion - Adding str to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.816 [main-1] AllOf_Assertion - Added Type_Assertion [[str]] to And_Assertion [[Type_Assertion [[str]]]]
[TRACE] 2020-08-25 17:22:33.816 [main-1] Pattern_Assertion - Created a new Pattern_Assertion: Pattern_Assertion [pNot("aa")]
[TRACE] 2020-08-25 17:22:33.816 [main-1] AllOf_Assertion - Added Pattern_Assertion [pNot("aa")] to And_Assertion [[Type_Assertion [[str]], Pattern_Assertion [pNot("aa")]]]
[TRACE] 2020-08-25 17:22:33.816 [main-1] Boolean_Assertion - Creating a Boolean_Assertion with value false
def "OBDD_true" = true,
rootdef "root" = pattern("aa"),
def "not_root" = {
	type[
		str
	],
	pattern(pNot("aa"))
},
def "OBDD_false" = false
[TRACE] 2020-08-25 17:22:33.821 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[TRACE] 2020-08-25 17:22:33.821 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[TRACE] 2020-08-25 17:22:33.821 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_false'}
[TRACE] 2020-08-25 17:22:33.821 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[DEBUG] 2020-08-25 17:22:33.822 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=false}
[TRACE] 2020-08-25 17:22:33.822 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_true'}
[TRACE] 2020-08-25 17:22:33.822 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[DEBUG] 2020-08-25 17:22:33.822 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.822 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_false'}
[TRACE] 2020-08-25 17:22:33.822 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[TRACE] 2020-08-25 17:22:33.822 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_true'}
[TRACE] 2020-08-25 17:22:33.822 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[TRACE] 2020-08-25 17:22:33.822 [main-1] WitnessEnv - Creating an empty WitnessEnv
[TRACE] 2020-08-25 17:22:33.822 [main-1] WitnessEnv - Adding to env <WitnessVar{name='OBDD_true'}, WitnessBoolean{value=true}>
[TRACE] 2020-08-25 17:22:33.822 [main-1] WitnessEnv - Adding to env <WitnessVar{name='root'}, WitnessPattern{pattern="aa"}>
[DEBUG] 2020-08-25 17:22:33.822 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.822 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[TRACE] 2020-08-25 17:22:33.824 [main-1] WitnessEnv - Adding to env <WitnessVar{name='not_root'}, WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessType=[WitnessType{type=[str]}], class it.unipi.di.tesiF
[TRACE] 2020-08-25 17:22:33.824 [main-1] WitnessEnv - Adding to env <WitnessVar{name='OBDD_false'}, WitnessBoolean{value=false}>


 Merge: 

[TRACE] 2020-08-25 17:22:33.824 [main-1] Defs_Assertion - Creating an empty Defs_Assertion
[TRACE] 2020-08-25 17:22:33.824 [main-1] Pattern_Assertion - Created a new Pattern_Assertion: Pattern_Assertion ["aa"]
[TRACE] 2020-08-25 17:22:33.824 [main-1] Defs_Assertion - Setting root={} as rootdef
[TRACE] 2020-08-25 17:22:33.824 [main-1] Boolean_Assertion - Creating a Boolean_Assertion with value true
[TRACE] 2020-08-25 17:22:33.824 [main-1] AllOf_Assertion - Creating an empty AllOf_Assertion
[TRACE] 2020-08-25 17:22:33.825 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.825 [main-1] Type_Assertion - Adding str to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.825 [main-1] AllOf_Assertion - Added Type_Assertion [[str]] to And_Assertion [[Type_Assertion [[str]]]]
[TRACE] 2020-08-25 17:22:33.825 [main-1] Pattern_Assertion - Created a new Pattern_Assertion: Pattern_Assertion [pNot("aa")]
[TRACE] 2020-08-25 17:22:33.825 [main-1] AllOf_Assertion - Added Pattern_Assertion [pNot("aa")] to And_Assertion [[Type_Assertion [[str]], Pattern_Assertion [pNot("aa")]]]
[TRACE] 2020-08-25 17:22:33.825 [main-1] Boolean_Assertion - Creating a Boolean_Assertion with value false
def "OBDD_true" = true,
rootdef "root" = pattern("aa"),
def "not_root" = {
	type[
		str
	],
	pattern(pNot("aa"))
},
def "OBDD_false" = false


 Groupize: 

[TRACE] 2020-08-25 17:22:33.826 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[TRACE] 2020-08-25 17:22:33.826 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[TRACE] 2020-08-25 17:22:33.826 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_false'}
[TRACE] 2020-08-25 17:22:33.826 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[DEBUG] 2020-08-25 17:22:33.826 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=false}
[TRACE] 2020-08-25 17:22:33.826 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_true'}
[TRACE] 2020-08-25 17:22:33.826 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[DEBUG] 2020-08-25 17:22:33.826 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.826 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_false'}
[TRACE] 2020-08-25 17:22:33.826 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[TRACE] 2020-08-25 17:22:33.826 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_true'}
[TRACE] 2020-08-25 17:22:33.826 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[TRACE] 2020-08-25 17:22:33.826 [main-1] WitnessEnv - Creating an empty WitnessEnv
[TRACE] 2020-08-25 17:22:33.826 [main-1] WitnessEnv - Adding to env <WitnessVar{name='OBDD_true'}, WitnessBoolean{value=true}>
[DEBUG] 2020-08-25 17:22:33.826 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.826 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[DEBUG] 2020-08-25 17:22:33.827 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=false}
[TRACE] 2020-08-25 17:22:33.827 [main-1] WitnessOr - Creating an empty WitnessOr
[DEBUG] 2020-08-25 17:22:33.828 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.828 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[TRACE] 2020-08-25 17:22:33.828 [main-1] WitnessType - Created a new WitnessType: 
[DEBUG] 2020-08-25 17:22:33.828 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.828 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[TRACE] 2020-08-25 17:22:33.828 [main-1] WitnessType - Created a new WitnessType: 
[DEBUG] 2020-08-25 17:22:33.828 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.828 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[TRACE] 2020-08-25 17:22:33.828 [main-1] WitnessType - Created a new WitnessType: 
[DEBUG] 2020-08-25 17:22:33.828 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.828 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[TRACE] 2020-08-25 17:22:33.828 [main-1] WitnessType - Created a new WitnessType: 
[DEBUG] 2020-08-25 17:22:33.829 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.829 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[TRACE] 2020-08-25 17:22:33.829 [main-1] WitnessType - Created a new WitnessType: 
[DEBUG] 2020-08-25 17:22:33.829 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.829 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[TRACE] 2020-08-25 17:22:33.829 [main-1] WitnessType - Created a new WitnessType: 
[TRACE] 2020-08-25 17:22:33.829 [main-1] WitnessType - Created a new WitnessType: 
[TRACE] 2020-08-25 17:22:33.829 [main-1] WitnessType - Created a new WitnessType: 
[TRACE] 2020-08-25 17:22:33.829 [main-1] WitnessType - Created a new WitnessType: 
[TRACE] 2020-08-25 17:22:33.829 [main-1] WitnessOr - Adding WitnessType{type=[arr]} in WitnessOr{
orList={}
}
[TRACE] 2020-08-25 17:22:33.830 [main-1] WitnessOr - Adding WitnessType{type=[num]} in WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonS
[TRACE] 2020-08-25 17:22:33.830 [main-1] WitnessOr - Adding WitnessType{type=[null]} in WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.Json
[TRACE] 2020-08-25 17:22:33.830 [main-1] WitnessOr - Adding WitnessType{type=[obj]} in WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonS
[TRACE] 2020-08-25 17:22:33.830 [main-1] WitnessOr - Adding WitnessType{type=[bool]} in WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.Json
[TRACE] 2020-08-25 17:22:33.830 [main-1] WitnessEnv - Adding to env <WitnessVar{name='root'}, WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi
[TRACE] 2020-08-25 17:22:33.830 [main-1] WitnessType - Created a new WitnessType: 
[TRACE] 2020-08-25 17:22:33.830 [main-1] WitnessType - Splitting WitnessType{type=[str]} in [WitnessType{type=[str]}]
[DEBUG] 2020-08-25 17:22:33.830 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.830 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[TRACE] 2020-08-25 17:22:33.830 [main-1] WitnessType - Created a new WitnessType: 
[TRACE] 2020-08-25 17:22:33.830 [main-1] WitnessType - Created a new WitnessType: 
[TRACE] 2020-08-25 17:22:33.830 [main-1] WitnessEnv - Adding to env <WitnessVar{name='not_root'}, WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessType=[WitnessType{type=[str]}], class it.unipi.di.tesiF
[TRACE] 2020-08-25 17:22:33.831 [main-1] WitnessEnv - Adding to env <WitnessVar{name='OBDD_false'}, WitnessBoolean{value=false}>
[TRACE] 2020-08-25 17:22:33.831 [main-1] Defs_Assertion - Creating an empty Defs_Assertion
[TRACE] 2020-08-25 17:22:33.831 [main-1] AnyOf_Assertion - Creating an empty AnyOf_Assertion
[TRACE] 2020-08-25 17:22:33.831 [main-1] AllOf_Assertion - Creating an empty AllOf_Assertion
[TRACE] 2020-08-25 17:22:33.831 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.831 [main-1] Type_Assertion - Adding str to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.831 [main-1] AllOf_Assertion - Added Type_Assertion [[str]] to And_Assertion [[Type_Assertion [[str]]]]
[TRACE] 2020-08-25 17:22:33.831 [main-1] Pattern_Assertion - Created a new Pattern_Assertion: Pattern_Assertion ["aa"]
[TRACE] 2020-08-25 17:22:33.831 [main-1] AllOf_Assertion - Added Pattern_Assertion ["aa"] to And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]]
[TRACE] 2020-08-25 17:22:33.832 [main-1] AnyOf_Assertion - Adding And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]] to Or_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.832 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.832 [main-1] Type_Assertion - Adding arr to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.832 [main-1] AnyOf_Assertion - Adding Type_Assertion [[arr]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]]]]
[TRACE] 2020-08-25 17:22:33.832 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.832 [main-1] Type_Assertion - Adding num to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.832 [main-1] AnyOf_Assertion - Adding Type_Assertion [[num]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]]]]
[TRACE] 2020-08-25 17:22:33.832 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.832 [main-1] Type_Assertion - Adding null to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.832 [main-1] AnyOf_Assertion - Adding Type_Assertion [[null]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]], Type_Assertion [[num]]]]
[TRACE] 2020-08-25 17:22:33.832 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.832 [main-1] Type_Assertion - Adding obj to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.832 [main-1] AnyOf_Assertion - Adding Type_Assertion [[obj]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]], Type_Assertion [[num]], Type_Assertion [[null]]]]
[TRACE] 2020-08-25 17:22:33.832 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.832 [main-1] Type_Assertion - Adding bool to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.832 [main-1] AnyOf_Assertion - Adding Type_Assertion [[bool]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]], Type_Assertion [[num]], Type_Assertion [[null]], Type_Asser
[TRACE] 2020-08-25 17:22:33.833 [main-1] Defs_Assertion - Setting root={} as rootdef
[TRACE] 2020-08-25 17:22:33.833 [main-1] Boolean_Assertion - Creating a Boolean_Assertion with value true
[TRACE] 2020-08-25 17:22:33.833 [main-1] AllOf_Assertion - Creating an empty AllOf_Assertion
[TRACE] 2020-08-25 17:22:33.833 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.833 [main-1] Type_Assertion - Adding str to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.833 [main-1] AllOf_Assertion - Added Type_Assertion [[str]] to And_Assertion [[Type_Assertion [[str]]]]
[TRACE] 2020-08-25 17:22:33.833 [main-1] Pattern_Assertion - Created a new Pattern_Assertion: Pattern_Assertion [pNot("aa")]
[TRACE] 2020-08-25 17:22:33.833 [main-1] AllOf_Assertion - Added Pattern_Assertion [pNot("aa")] to And_Assertion [[Type_Assertion [[str]], Pattern_Assertion [pNot("aa")]]]
[TRACE] 2020-08-25 17:22:33.833 [main-1] Boolean_Assertion - Creating a Boolean_Assertion with value false
def "OBDD_true" = true,
rootdef "root" = anyOf[
	{
		type[
			str
		],
		pattern("aa")
	},
	type[
		arr
	],
	type[
		num
	],
	type[
		null
	],
	type[
		obj
	],
	type[
		bool
	]
],
def "not_root" = {
	type[
		str
	],
	pattern(pNot("aa"))
},
def "OBDD_false" = false


 DNF: 

[TRACE] 2020-08-25 17:22:33.834 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[TRACE] 2020-08-25 17:22:33.835 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[TRACE] 2020-08-25 17:22:33.835 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_false'}
[TRACE] 2020-08-25 17:22:33.835 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[DEBUG] 2020-08-25 17:22:33.835 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=false}
[TRACE] 2020-08-25 17:22:33.835 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_true'}
[TRACE] 2020-08-25 17:22:33.835 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[DEBUG] 2020-08-25 17:22:33.835 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.835 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_false'}
[TRACE] 2020-08-25 17:22:33.835 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[TRACE] 2020-08-25 17:22:33.835 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_true'}
[TRACE] 2020-08-25 17:22:33.835 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[TRACE] 2020-08-25 17:22:33.836 [main-1] WitnessEnv - Creating an empty WitnessEnv
[DEBUG] 2020-08-25 17:22:33.836 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[DEBUG] 2020-08-25 17:22:33.836 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=false}
[TRACE] 2020-08-25 17:22:33.836 [main-1] WitnessOr - Creating an empty WitnessOr
[TRACE] 2020-08-25 17:22:33.836 [main-1] WitnessType - Cloning WitnessType{type=[arr]}
[TRACE] 2020-08-25 17:22:33.836 [main-1] WitnessType - Adding arr to WitnessType{type=[]}
[TRACE] 2020-08-25 17:22:33.836 [main-1] WitnessOr - Adding WitnessType{type=[arr]} in WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonS
[TRACE] 2020-08-25 17:22:33.836 [main-1] WitnessType - Cloning WitnessType{type=[num]}
[TRACE] 2020-08-25 17:22:33.836 [main-1] WitnessType - Adding num to WitnessType{type=[]}
[TRACE] 2020-08-25 17:22:33.836 [main-1] WitnessOr - Adding WitnessType{type=[num]} in WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonS
[TRACE] 2020-08-25 17:22:33.836 [main-1] WitnessType - Cloning WitnessType{type=[null]}
[TRACE] 2020-08-25 17:22:33.836 [main-1] WitnessType - Adding null to WitnessType{type=[]}
[TRACE] 2020-08-25 17:22:33.837 [main-1] WitnessOr - Adding WitnessType{type=[null]} in WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.Json
[TRACE] 2020-08-25 17:22:33.837 [main-1] WitnessType - Cloning WitnessType{type=[obj]}
[TRACE] 2020-08-25 17:22:33.837 [main-1] WitnessType - Adding obj to WitnessType{type=[]}
[TRACE] 2020-08-25 17:22:33.837 [main-1] WitnessOr - Adding WitnessType{type=[obj]} in WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonS
[TRACE] 2020-08-25 17:22:33.837 [main-1] WitnessType - Cloning WitnessType{type=[bool]}
[TRACE] 2020-08-25 17:22:33.837 [main-1] WitnessType - Adding bool to WitnessType{type=[]}
[TRACE] 2020-08-25 17:22:33.837 [main-1] WitnessOr - Adding WitnessType{type=[bool]} in WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.Json
[DEBUG] 2020-08-25 17:22:33.837 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=false}
[TRACE] 2020-08-25 17:22:33.837 [main-1] Defs_Assertion - Creating an empty Defs_Assertion
[TRACE] 2020-08-25 17:22:33.837 [main-1] AnyOf_Assertion - Creating an empty AnyOf_Assertion
[TRACE] 2020-08-25 17:22:33.837 [main-1] AllOf_Assertion - Creating an empty AllOf_Assertion
[TRACE] 2020-08-25 17:22:33.837 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.837 [main-1] Type_Assertion - Adding str to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.837 [main-1] AllOf_Assertion - Added Type_Assertion [[str]] to And_Assertion [[Type_Assertion [[str]]]]
[TRACE] 2020-08-25 17:22:33.837 [main-1] Pattern_Assertion - Created a new Pattern_Assertion: Pattern_Assertion ["aa"]
[TRACE] 2020-08-25 17:22:33.838 [main-1] AllOf_Assertion - Added Pattern_Assertion ["aa"] to And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]]
[TRACE] 2020-08-25 17:22:33.838 [main-1] AnyOf_Assertion - Adding And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]] to Or_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.838 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.838 [main-1] Type_Assertion - Adding arr to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.838 [main-1] AnyOf_Assertion - Adding Type_Assertion [[arr]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]]]]
[TRACE] 2020-08-25 17:22:33.838 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.838 [main-1] Type_Assertion - Adding num to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.838 [main-1] AnyOf_Assertion - Adding Type_Assertion [[num]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]]]]
[TRACE] 2020-08-25 17:22:33.838 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.838 [main-1] Type_Assertion - Adding null to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.838 [main-1] AnyOf_Assertion - Adding Type_Assertion [[null]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]], Type_Assertion [[num]]]]
[TRACE] 2020-08-25 17:22:33.838 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.838 [main-1] Type_Assertion - Adding obj to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.838 [main-1] AnyOf_Assertion - Adding Type_Assertion [[obj]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]], Type_Assertion [[num]], Type_Assertion [[null]]]]
[TRACE] 2020-08-25 17:22:33.838 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.838 [main-1] Type_Assertion - Adding bool to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.838 [main-1] AnyOf_Assertion - Adding Type_Assertion [[bool]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]], Type_Assertion [[num]], Type_Assertion [[null]], Type_Asser
[TRACE] 2020-08-25 17:22:33.838 [main-1] Defs_Assertion - Setting root={} as rootdef
[TRACE] 2020-08-25 17:22:33.838 [main-1] Boolean_Assertion - Creating a Boolean_Assertion with value true
[TRACE] 2020-08-25 17:22:33.838 [main-1] AllOf_Assertion - Creating an empty AllOf_Assertion
[TRACE] 2020-08-25 17:22:33.838 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.839 [main-1] Type_Assertion - Adding str to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.839 [main-1] AllOf_Assertion - Added Type_Assertion [[str]] to And_Assertion [[Type_Assertion [[str]]]]
[TRACE] 2020-08-25 17:22:33.839 [main-1] Pattern_Assertion - Created a new Pattern_Assertion: Pattern_Assertion [pNot("aa")]
[TRACE] 2020-08-25 17:22:33.839 [main-1] AllOf_Assertion - Added Pattern_Assertion [pNot("aa")] to And_Assertion [[Type_Assertion [[str]], Pattern_Assertion [pNot("aa")]]]
[TRACE] 2020-08-25 17:22:33.839 [main-1] Boolean_Assertion - Creating a Boolean_Assertion with value false
def "OBDD_true" = true,
rootdef "root" = anyOf[
	{
		type[
			str
		],
		pattern("aa")
	},
	type[
		arr
	],
	type[
		num
	],
	type[
		null
	],
	type[
		obj
	],
	type[
		bool
	]
],
def "not_root" = {
	type[
		str
	],
	pattern(pNot("aa"))
},
def "OBDD_false" = false


 Separation: 

[TRACE] 2020-08-25 17:22:33.839 [main-1] WitnessEnv - Building obdd
[TRACE] 2020-08-25 17:22:33.839 [main-1] Defs_Assertion - Creating an empty Defs_Assertion
[TRACE] 2020-08-25 17:22:33.839 [main-1] AnyOf_Assertion - Creating an empty AnyOf_Assertion
[TRACE] 2020-08-25 17:22:33.839 [main-1] AllOf_Assertion - Creating an empty AllOf_Assertion
[TRACE] 2020-08-25 17:22:33.839 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.839 [main-1] Type_Assertion - Adding str to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.839 [main-1] AllOf_Assertion - Added Type_Assertion [[str]] to And_Assertion [[Type_Assertion [[str]]]]
[TRACE] 2020-08-25 17:22:33.839 [main-1] Pattern_Assertion - Created a new Pattern_Assertion: Pattern_Assertion ["aa"]
[TRACE] 2020-08-25 17:22:33.839 [main-1] AllOf_Assertion - Added Pattern_Assertion ["aa"] to And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]]
[TRACE] 2020-08-25 17:22:33.839 [main-1] AnyOf_Assertion - Adding And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]] to Or_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.839 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.839 [main-1] Type_Assertion - Adding arr to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.839 [main-1] AnyOf_Assertion - Adding Type_Assertion [[arr]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]]]]
[TRACE] 2020-08-25 17:22:33.840 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.840 [main-1] Type_Assertion - Adding num to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.840 [main-1] AnyOf_Assertion - Adding Type_Assertion [[num]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]]]]
[TRACE] 2020-08-25 17:22:33.840 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.840 [main-1] Type_Assertion - Adding null to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.840 [main-1] AnyOf_Assertion - Adding Type_Assertion [[null]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]], Type_Assertion [[num]]]]
[TRACE] 2020-08-25 17:22:33.840 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.840 [main-1] Type_Assertion - Adding obj to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.840 [main-1] AnyOf_Assertion - Adding Type_Assertion [[obj]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]], Type_Assertion [[num]], Type_Assertion [[null]]]]
[TRACE] 2020-08-25 17:22:33.840 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.840 [main-1] Type_Assertion - Adding bool to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.840 [main-1] AnyOf_Assertion - Adding Type_Assertion [[bool]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]], Type_Assertion [[num]], Type_Assertion [[null]], Type_Asser
[TRACE] 2020-08-25 17:22:33.840 [main-1] Defs_Assertion - Setting root={} as rootdef
[TRACE] 2020-08-25 17:22:33.840 [main-1] Boolean_Assertion - Creating a Boolean_Assertion with value true
[TRACE] 2020-08-25 17:22:33.840 [main-1] AllOf_Assertion - Creating an empty AllOf_Assertion
[TRACE] 2020-08-25 17:22:33.840 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.840 [main-1] Type_Assertion - Adding str to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.840 [main-1] AllOf_Assertion - Added Type_Assertion [[str]] to And_Assertion [[Type_Assertion [[str]]]]
[TRACE] 2020-08-25 17:22:33.840 [main-1] Pattern_Assertion - Created a new Pattern_Assertion: Pattern_Assertion [pNot("aa")]
[TRACE] 2020-08-25 17:22:33.840 [main-1] AllOf_Assertion - Added Pattern_Assertion [pNot("aa")] to And_Assertion [[Type_Assertion [[str]], Pattern_Assertion [pNot("aa")]]]
[TRACE] 2020-08-25 17:22:33.840 [main-1] Boolean_Assertion - Creating a Boolean_Assertion with value false
def "OBDD_true" = true,
rootdef "root" = anyOf[
	{
		type[
			str
		],
		pattern("aa")
	},
	type[
		arr
	],
	type[
		num
	],
	type[
		null
	],
	type[
		obj
	],
	type[
		bool
	]
],
def "not_root" = {
	type[
		str
	],
	pattern(pNot("aa"))
},
def "OBDD_false" = false


 Expansion: 

[TRACE] 2020-08-25 17:22:33.841 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[TRACE] 2020-08-25 17:22:33.841 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[TRACE] 2020-08-25 17:22:33.841 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_false'}
[TRACE] 2020-08-25 17:22:33.841 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[DEBUG] 2020-08-25 17:22:33.841 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=false}
[TRACE] 2020-08-25 17:22:33.841 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_true'}
[TRACE] 2020-08-25 17:22:33.841 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[DEBUG] 2020-08-25 17:22:33.841 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.841 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_false'}
[TRACE] 2020-08-25 17:22:33.841 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[TRACE] 2020-08-25 17:22:33.841 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_true'}
[TRACE] 2020-08-25 17:22:33.841 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[TRACE] 2020-08-25 17:22:33.841 [main-1] WitnessEnv - Creating an empty WitnessEnv
[TRACE] 2020-08-25 17:22:33.842 [main-1] WitnessEnv - Adding to env <WitnessVar{name='OBDD_true'}, WitnessBoolean{value=true}>
[TRACE] 2020-08-25 17:22:33.842 [main-1] WitnessEnv - Adding to env <WitnessVar{name='root'}, WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi
[TRACE] 2020-08-25 17:22:33.842 [main-1] WitnessEnv - Adding to env <WitnessVar{name='not_root'}, WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessType=[WitnessType{type=[str]}], class it.unipi.di.tesiF
[TRACE] 2020-08-25 17:22:33.842 [main-1] WitnessEnv - Adding to env <WitnessVar{name='OBDD_false'}, WitnessBoolean{value=false}>
[TRACE] 2020-08-25 17:22:33.842 [main-1] Defs_Assertion - Creating an empty Defs_Assertion
[TRACE] 2020-08-25 17:22:33.842 [main-1] AnyOf_Assertion - Creating an empty AnyOf_Assertion
[TRACE] 2020-08-25 17:22:33.842 [main-1] AllOf_Assertion - Creating an empty AllOf_Assertion
[TRACE] 2020-08-25 17:22:33.843 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.843 [main-1] Type_Assertion - Adding str to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.843 [main-1] AllOf_Assertion - Added Type_Assertion [[str]] to And_Assertion [[Type_Assertion [[str]]]]
[TRACE] 2020-08-25 17:22:33.843 [main-1] Pattern_Assertion - Created a new Pattern_Assertion: Pattern_Assertion ["aa"]
[TRACE] 2020-08-25 17:22:33.843 [main-1] AllOf_Assertion - Added Pattern_Assertion ["aa"] to And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]]
[TRACE] 2020-08-25 17:22:33.843 [main-1] AnyOf_Assertion - Adding And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]] to Or_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.843 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.843 [main-1] Type_Assertion - Adding arr to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.843 [main-1] AnyOf_Assertion - Adding Type_Assertion [[arr]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]]]]
[TRACE] 2020-08-25 17:22:33.843 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.843 [main-1] Type_Assertion - Adding num to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.843 [main-1] AnyOf_Assertion - Adding Type_Assertion [[num]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]]]]
[TRACE] 2020-08-25 17:22:33.843 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.843 [main-1] Type_Assertion - Adding null to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.843 [main-1] AnyOf_Assertion - Adding Type_Assertion [[null]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]], Type_Assertion [[num]]]]
[TRACE] 2020-08-25 17:22:33.843 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.843 [main-1] Type_Assertion - Adding obj to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.843 [main-1] AnyOf_Assertion - Adding Type_Assertion [[obj]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]], Type_Assertion [[num]], Type_Assertion [[null]]]]
[TRACE] 2020-08-25 17:22:33.843 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.843 [main-1] Type_Assertion - Adding bool to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.843 [main-1] AnyOf_Assertion - Adding Type_Assertion [[bool]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]], Type_Assertion [[num]], Type_Assertion [[null]], Type_Asser
[TRACE] 2020-08-25 17:22:33.843 [main-1] Defs_Assertion - Setting root={} as rootdef
[TRACE] 2020-08-25 17:22:33.843 [main-1] Boolean_Assertion - Creating a Boolean_Assertion with value true
[TRACE] 2020-08-25 17:22:33.843 [main-1] AllOf_Assertion - Creating an empty AllOf_Assertion
[TRACE] 2020-08-25 17:22:33.843 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.843 [main-1] Type_Assertion - Adding str to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.843 [main-1] AllOf_Assertion - Added Type_Assertion [[str]] to And_Assertion [[Type_Assertion [[str]]]]
[TRACE] 2020-08-25 17:22:33.844 [main-1] Pattern_Assertion - Created a new Pattern_Assertion: Pattern_Assertion [pNot("aa")]
[TRACE] 2020-08-25 17:22:33.844 [main-1] AllOf_Assertion - Added Pattern_Assertion [pNot("aa")] to And_Assertion [[Type_Assertion [[str]], Pattern_Assertion [pNot("aa")]]]
[TRACE] 2020-08-25 17:22:33.844 [main-1] Boolean_Assertion - Creating a Boolean_Assertion with value false
def "OBDD_true" = true,
rootdef "root" = anyOf[
	{
		type[
			str
		],
		pattern("aa")
	},
	type[
		arr
	],
	type[
		num
	],
	type[
		null
	],
	type[
		obj
	],
	type[
		bool
	]
],
def "not_root" = {
	type[
		str
	],
	pattern(pNot("aa"))
},
def "OBDD_false" = false


 objectPrepare: 

[TRACE] 2020-08-25 17:22:33.844 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[TRACE] 2020-08-25 17:22:33.844 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[TRACE] 2020-08-25 17:22:33.844 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_false'}
[TRACE] 2020-08-25 17:22:33.844 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[DEBUG] 2020-08-25 17:22:33.844 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=false}
[TRACE] 2020-08-25 17:22:33.844 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_true'}
[TRACE] 2020-08-25 17:22:33.844 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[DEBUG] 2020-08-25 17:22:33.844 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.844 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_false'}
[TRACE] 2020-08-25 17:22:33.844 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_false=resolveName(OBDD_false))
[TRACE] 2020-08-25 17:22:33.844 [main-1] WitnessVar - Cloning WitnessVar{name='OBDD_true'}
[TRACE] 2020-08-25 17:22:33.844 [main-1] WitnessVar - Created a new WitnessVar with name=(OBDD_true=resolveName(OBDD_true))
[TRACE] 2020-08-25 17:22:33.844 [main-1] WitnessEnv - Creating an empty WitnessEnv
[TRACE] 2020-08-25 17:22:33.845 [main-1] WitnessEnv - Adding to env <WitnessVar{name='OBDD_true'}, WitnessBoolean{value=true}>
[DEBUG] 2020-08-25 17:22:33.845 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=false}
[TRACE] 2020-08-25 17:22:33.845 [main-1] WitnessOr - Creating an empty WitnessOr
[DEBUG] 2020-08-25 17:22:33.845 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.845 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[TRACE] 2020-08-25 17:22:33.845 [main-1] WitnessOr - Adding WitnessType{type=[arr]} in WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonS
[TRACE] 2020-08-25 17:22:33.845 [main-1] WitnessOr - Adding WitnessType{type=[num]} in WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonS
[TRACE] 2020-08-25 17:22:33.845 [main-1] WitnessOr - Adding WitnessType{type=[null]} in WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.Json
[TRACE] 2020-08-25 17:22:33.845 [main-1] WitnessOr - Adding WitnessType{type=[obj]} in WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonS
[TRACE] 2020-08-25 17:22:33.845 [main-1] WitnessOr - Adding WitnessType{type=[bool]} in WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.Json
[TRACE] 2020-08-25 17:22:33.845 [main-1] WitnessEnv - Adding to env <WitnessVar{name='root'}, WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi
[DEBUG] 2020-08-25 17:22:33.845 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.845 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[TRACE] 2020-08-25 17:22:33.845 [main-1] WitnessEnv - Adding to env <WitnessVar{name='not_root'}, WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessType=[WitnessType{type=[str]}], class it.unipi.di.tesiF
[TRACE] 2020-08-25 17:22:33.845 [main-1] WitnessEnv - Adding to env <WitnessVar{name='OBDD_false'}, WitnessBoolean{value=false}>
[DEBUG] 2020-08-25 17:22:33.845 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=false}
[TRACE] 2020-08-25 17:22:33.845 [main-1] WitnessOr - Creating an empty WitnessOr
[DEBUG] 2020-08-25 17:22:33.846 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.846 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[TRACE] 2020-08-25 17:22:33.846 [main-1] WitnessOr - Adding boolean WitnessBoolean{value=false} in WitnessOr{
orList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessAnd=[WitnessAnd{
andList={class it.unipi.di.tesiFallen
[DEBUG] 2020-08-25 17:22:33.846 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.846 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[TRACE] 2020-08-25 17:22:33.846 [main-1] WitnessType - Created a new WitnessType: 
[DEBUG] 2020-08-25 17:22:33.846 [main-1] WitnessAnd - Preparing WitnessAnd without type object assertion
[DEBUG] 2020-08-25 17:22:33.846 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.846 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[DEBUG] 2020-08-25 17:22:33.846 [main-1] WitnessAnd - Preparing WitnessAnd without type specified
[DEBUG] 2020-08-25 17:22:33.846 [main-1] WitnessBoolean - Created a new WitnessBoolean: WitnessBoolean{value=true}
[TRACE] 2020-08-25 17:22:33.846 [main-1] WitnessAnd - Created a new and: WitnessAnd{
andList={class it.unipi.di.tesiFalleniLandi.JsonSchema_to_Algebra.WitnessAlgebra.WitnessBoolean=[WitnessBoolean{value=true}]}
}
[DEBUG] 2020-08-25 17:22:33.846 [main-1] WitnessAnd - Preparing WitnessAnd without type specified
[TRACE] 2020-08-25 17:22:33.846 [main-1] WitnessType - Created a new WitnessType: 
[DEBUG] 2020-08-25 17:22:33.846 [main-1] WitnessAnd - Preparing WitnessAnd without type object assertion
[TRACE] 2020-08-25 17:22:33.847 [main-1] Defs_Assertion - Creating an empty Defs_Assertion
[TRACE] 2020-08-25 17:22:33.847 [main-1] AnyOf_Assertion - Creating an empty AnyOf_Assertion
[TRACE] 2020-08-25 17:22:33.847 [main-1] AllOf_Assertion - Creating an empty AllOf_Assertion
[TRACE] 2020-08-25 17:22:33.847 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.847 [main-1] Type_Assertion - Adding str to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.847 [main-1] AllOf_Assertion - Added Type_Assertion [[str]] to And_Assertion [[Type_Assertion [[str]]]]
[TRACE] 2020-08-25 17:22:33.847 [main-1] Pattern_Assertion - Created a new Pattern_Assertion: Pattern_Assertion ["aa"]
[TRACE] 2020-08-25 17:22:33.847 [main-1] AllOf_Assertion - Added Pattern_Assertion ["aa"] to And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]]
[TRACE] 2020-08-25 17:22:33.847 [main-1] AnyOf_Assertion - Adding And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]] to Or_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.847 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.847 [main-1] Type_Assertion - Adding arr to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.847 [main-1] AnyOf_Assertion - Adding Type_Assertion [[arr]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]]]]
[TRACE] 2020-08-25 17:22:33.847 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.847 [main-1] Type_Assertion - Adding num to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.847 [main-1] AnyOf_Assertion - Adding Type_Assertion [[num]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]]]]
[TRACE] 2020-08-25 17:22:33.847 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.847 [main-1] Type_Assertion - Adding null to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.847 [main-1] AnyOf_Assertion - Adding Type_Assertion [[null]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]], Type_Assertion [[num]]]]
[TRACE] 2020-08-25 17:22:33.847 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.847 [main-1] Type_Assertion - Adding obj to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.847 [main-1] AnyOf_Assertion - Adding Type_Assertion [[obj]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]], Type_Assertion [[num]], Type_Assertion [[null]]]]
[TRACE] 2020-08-25 17:22:33.847 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.847 [main-1] Type_Assertion - Adding bool to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.847 [main-1] AnyOf_Assertion - Adding Type_Assertion [[bool]] to Or_Assertion [[And_Assertion [[Type_Assertion [[str]], Pattern_Assertion ["aa"]]], Type_Assertion [[arr]], Type_Assertion [[num]], Type_Assertion [[null]], Type_Asser
[TRACE] 2020-08-25 17:22:33.847 [main-1] Defs_Assertion - Setting root={} as rootdef
[TRACE] 2020-08-25 17:22:33.847 [main-1] Boolean_Assertion - Creating a Boolean_Assertion with value true
[TRACE] 2020-08-25 17:22:33.847 [main-1] AllOf_Assertion - Creating an empty AllOf_Assertion
[TRACE] 2020-08-25 17:22:33.848 [main-1] Type_Assertion - Creating an empty Type_Assertion
[TRACE] 2020-08-25 17:22:33.848 [main-1] Type_Assertion - Adding str to Type_Assertion [[]]
[TRACE] 2020-08-25 17:22:33.848 [main-1] AllOf_Assertion - Added Type_Assertion [[str]] to And_Assertion [[Type_Assertion [[str]]]]
[TRACE] 2020-08-25 17:22:33.848 [main-1] Pattern_Assertion - Created a new Pattern_Assertion: Pattern_Assertion [pNot("aa")]
[TRACE] 2020-08-25 17:22:33.848 [main-1] AllOf_Assertion - Added Pattern_Assertion [pNot("aa")] to And_Assertion [[Type_Assertion [[str]], Pattern_Assertion [pNot("aa")]]]
[TRACE] 2020-08-25 17:22:33.848 [main-1] Boolean_Assertion - Creating a Boolean_Assertion with value false
def "OBDD_true" = true,
rootdef "root" = anyOf[
	{
		type[
			str
		],
		pattern("aa")
	},
	type[
		arr
	],
	type[
		num
	],
	type[
		null
	],
	type[
		obj
	],
	type[
		bool
	]
],
def "not_root" = {
	type[
		str
	],
	pattern(pNot("aa"))
},
def "OBDD_false" = false


 FINE! 

