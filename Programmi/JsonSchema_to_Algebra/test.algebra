def "snippet" = {
	req[
		"snippet"
	],
	props[
		"^title$": type[
			str
		],
		"^snippet$": type[
			str
		];
		false
	]
},
def "method" = {
	type[
		obj
	],
	props[
		"^docs_only$": type[
			bool
		],
		"^provisional$": type[
			bool
		],
		"^ts_only$": type[
			bool
		],
		"^generics$": ref("genericsDef"),
		"^returns$": ref("typeReference"),
		"^description$": type[
			str
		],
		"^links$": ref("links"),
		"^parameters$": {
			type[
				arr
			],
			items[
				ref("parameter");

			]
		},
		"^ts_returns$": ref("typeReference"),
		"^protected$": type[
			bool
		],
		"^platforms$": ref("platforms"),
		"^private$": type[
			bool
		];
		false
	]
},
def "link" = {
	req[
		"title",
		"path"
	],
	props[
		"^title$": type[
			str
		],
		"^path$": type[
			str
		];
		false
	]
},
def "statics" = {
	type[
		obj
	],
	props[
		"^properties$": {
			type[
				obj
			],
			props[
				"(^_?[a-z]\\w+$)|(^\\[.*\\]$)": ref("property");
				false
			]
		},
		"^methods$": {
			type[
				obj
			],
			props[
				"(^_?[a-z]\\w+$)|(^\\[.*\\]$)": anyOf[
					ref("method"),
					{
						type[
							arr
						],
						items[
							ref("method");

						]
					}
				];
				false
			]
		};

	]
},
def "platforms" = {
	type[
		obj
	],
	props[
		"^ios$": type[
			bool
		],
		"^android$": type[
			bool
		];
		false
	]
},
def "generics" = {
	contains(1,+inf;true),
	type[
		arr
	],
	items[
		ref("typeReference");

	]
},
rootdef "root" = ref("api"),
def "parameter" = {
	type[
		obj
	],
	props[
		"^ts_type$": ref("typeReference"),
		"^optional$": type[
			bool
		],
		"^name$": type[
			str
		],
		"^description$": type[
			str
		],
		"^type$": ref("typeReference");
		false
	],
	req[
		"name",
		"type"
	]
},
def "property" = {
	type[
		obj
	],
	props[
		"^noChangeEvent$": type[
			bool
		],
		"^optional$": type[
			bool
		],
		"^type$": ref("typeReference"),
		"^links$": ref("links"),
		"^const$": type[
			bool
		],
		"^protected$": type[
			bool
		],
		"^ts_only$": type[
			bool
		],
		"^ts_type$": ref("typeReference"),
		"^readonly$": type[
			bool
		],
		"^jsxContentProperty$": type[
			bool
		],
		"^changeEventDescription$": type[
			str
		],
		"^description$": type[
			str
		],
		"^values$": {
			type[
				arr
			],
			items[
				oneOf[
					type[
						str
					],
					type[
						num
					],
					type[
						bool
					]
				];

			]
		},
		"^platforms$": ref("platforms"),
		"^private$": type[
			bool
		];
		false
	],
	req[
		"type"
	]
},
def "typeReference" = anyOf[
	type[
		str
	],
	{
		type[
			obj
		],
		props[
			"^generics$": ref("generics"),
			"^interface$": type[
				str
			];
			false
		],
		req[
			"interface",
			"generics"
		]
	},
	{
		type[
			obj
		],
		props[
			"^union$": {
				type[
					arr
				],
				items[
					ref("typeReference");

				]
			};
			false
		],
		req[
			"union"
		]
	},
	{
		type[
			obj
		],
		props[
			"^tuple$": {
				type[
					arr
				],
				items[
					ref("typeReference");

				]
			};
			false
		],
		req[
			"tuple"
		]
	},
	{
		type[
			obj
		],
		props[
			"^map$": {
				type[
					obj
				],
				props[
					"^[a-zA-Z]*$": ref("property");
					false
				],
				pro(1,+inf)
			};
			false
		],
		req[
			"map"
		]
	},
	{
		type[
			obj
		],
		props[
			"^indexType$": enum[
				"string","number","SelectorString"
			],
			"^map$": {
				type[
					obj
				],
				props[
					"^[a-z]\\w+$": ref("typeReference");
					false
				],
				pro(1,1)
			};
			false
		],
		req[
			"map",
			"indexType"
		]
	},
	{
		type[
			obj
		],
		props[
			"^returns$": {
				type[
					obj
				],
				props[
					"^name$": type[
						str
					],
					"^type$": ref("typeReference");
					false
				],
				req[
					"type"
				]
			},
			"^callback$": {
				type[
					arr
				],
				items[
					{
						type[
							obj
						],
						props[
							"^name$": type[
								str
							],
							"^type$": ref("typeReference");
							false
						],
						req[
							"type",
							"name"
						]
					};

				]
			};
			false
		],
		req[
			"callback"
		]
	}
],
def "links" = {
	type[
		arr
	],
	items[
		oneOf[
			ref("link"),
			ref("snippet")
		];

	]
},
def "api" = {
	allOf[
		anyOf[
			req[
				"type"
			],
			req[
				"object"
			],
			req[
				"namespace"
			]
		],
		anyOf[
			req[
				"title"
			],
			req[
				"object"
			],
			req[
				"type"
			]
		]
	],
	not({
			anyOf[
				req[
					"constructor"
				],
				req[
					"statics"
				]
			],
			props[
				"^interface$": enum[
					true
				];

			],
			req[
				"interface"
			]
		}),
	type[
		obj
	],
	props[
		"^extends$": ref("typeReference"),
		"^title$": type[
			str
		],
		"^generics$": ref("genericsDef"),
		"^constructor$": {
			props[
				"^parameters$": {
					type[
						arr
					],
					items[
						ref("parameter");

					]
				},
				"^access$": enum[
					"public","protected","private"
				];
				false
			],
			req[
				"access"
			]
		},
		"^properties$": {
			type[
				obj
			],
			props[
				"(^[_\\$]?[a-z]\\w+$)|(^\\[.*\\]$)": ref("property");
				false
			]
		},
		"^type$": type[
			str
		],
		"^methods$": {
			type[
				obj
			],
			props[
				"(^[_\\$]?[a-z]\\w+$)|(^\\[.*\\]$|^\\$$)": anyOf[
					ref("method"),
					{
						type[
							arr
						],
						items[
							ref("method");

						]
					}
				];
				false
			]
		},
		"^links$": ref("links"),
		"^statics$": ref("statics"),
		"^category$": enum[
			"core","service","widget","popup","net","data"
		],
		"^events$": {
			type[
				obj
			],
			props[
				"^[a-z]\\w+$": ref("event");
				false
			]
		},
		"^interface$": type[
			bool
		],
		"^namespace$": enum[
			"global","tabris"
		],
		"^object$": type[
			str
		],
		"^description$": type[
			str
		];
		false
	],
	req[
		"category"
	],
	ifThen(type[
			obj
		];
		allOf[
			ifThen(req[
					"extends"
				];
				req[
					"type"
				]),
			ifThen(req[
					"generics"
				];
				req[
					"type"
				]),
			ifThen(req[
					"constructor"
				];
				req[
					"type"
				]),
			ifThen(req[
					"events"
				];
				req[
					"type"
				]),
			ifThen(req[
					"object"
				];
				req[
					"type"
				])
		])
},
def "event" = {
	type[
		obj
	],
	props[
		"^eventObject$": type[
			str
		],
		"^description$": type[
			str
		],
		"^links$": ref("links"),
		"^parameters$": {
			type[
				obj
			],
			props[
				"^_?[a-z]\\w+$": ref("property");

			]
		},
		"^platforms$": ref("platforms");
		false
	]
},
def "genericsDef" = {
	contains(1,+inf;true),
	type[
		arr
	],
	items[
		{
			type[
				obj
			],
			props[
				"^extends$": ref("typeReference"),
				"^default$": ref("typeReference"),
				"^name$": type[
					str
				],
				"^description$": type[
					str
				];
				false
			],
			req[
				"name"
			]
		};

	]
}